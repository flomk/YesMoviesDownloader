#!/usr/bin/env python3

import argparse
import json
import re
import requests
import subprocess
import time

from bs4 import BeautifulSoup
from urllib.parse import urlparse

GENERIC_HEADERS = {
    'Pragma': 'no-cache',
    'Origin': 'https://yesmovies.to',
    'Accept-Encoding': 'gzip, deflate, br',
    'Accept-Language': 'en-US,en;q=0.9',
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36',
    'Accept': '*/*',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive',
    'DNT': '1',
}

s = requests.Session()


def main_downloader(url):
    path = urlparse(url).path.split("/")
    tmp = path[3].split("-")
    tmp2 = path[2].split("-")
    episode_id = tmp[0]
    server_num = tmp[1]
    movie_id = tmp2[-1]

    local_referer = make_referer_url(url, episode_id, server_num)
    local_add_headers = {'referer': local_referer, 'x-requested-with': 'XMLHttpRequest'}
    local_headers = GENERIC_HEADERS
    local_headers.update(local_add_headers)

    m_episodes = download_movie_episodes(movie_id, extra_headers=local_add_headers)
    # print(m_episodes)
    episodes = parse_ajax_html(m_episodes, server_num)

    commands = []
    for episode in episodes:
        local_eid = episode.get("eid")
        title = episode.get('title')

        headers = GENERIC_HEADERS
        referer_url = make_referer_url(url, local_eid, server_num)
        add_headers = {'referer': referer_url, 'x-requested-with': 'XMLHttpRequest'}
        headers.update(add_headers)

        m_token_x, m_token_y = get_movie_tokens(local_eid, movie_id, extra_headers=headers)
        source = get_movie_sources(local_eid, m_token_x, m_token_y, extra_headers=headers)
        cmd = make_ffmpeg(url, local_eid, server_num, title, source)
        while True:
            p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            stdout, stderr = p.communicate()
            if p.returncode == 0:
                break
        # print(subprocess.list2cmdline(cmd))
        # subprocess.Popen(cmd, stderr=subprocess.PIPE)
        # commands.append(cmd)
    # processes = [subprocess.Popen(cmd, stderr=subprocess.PIPE) for cmd in commands]
    # p = subprocess.Popen(cmd, stderr=subprocess.PIPE)


def make_ffmpeg(url, eid, server_num, title, m3u8):
    referer_url = make_referer_url(url, eid, server_num)
    headers = {
        'Pragma': 'no-cache',
        'Origin': 'https://yesmovies.to',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'en-US,en;q=0.9',
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36',
        'Accept': '*/*',
        'Cache-Control': 'no-cache',
        'Referer': referer_url,
        'Connection': 'keep-alive',
        'DNT': '1',
    }
    args = ['ffmpeg', '-y']
    args += ['-headers', ''.join('%s: %s\r\n' % (key, val) for key, val in headers.items())]
    args += ['-i', m3u8, '-c', 'copy', '-f', 'mp4', 'file:%s.mp4' % title]
    return args


def make_referer_url(url, eid, server_num):
    referer_url = url.split('/')
    bits = '%s-%s'
    referer_url[5] = bits % (eid, server_num)
    referer_url = '/'.join(referer_url)
    return referer_url


def get_movie_sources(eid, x, y, extra_headers=None):
    SOURCES_URL = "https://yesmovies.to/ajax/movie_sources/%s"
    params = (
        ('x', x),
        ('y', y),
    )
    sources_json = s.get(SOURCES_URL % eid, params=params, headers=extra_headers).text
    sources_json = json.loads(sources_json)
    file = sources_json['playlist'][0]['sources'][0]['file']
    return file


def parse_ajax_html(html_content, server_num):
    soup = BeautifulSoup(html_content, 'html.parser')
    list_id = "episodes-sv-%s" % server_num
    entries = soup.find('ul', attrs={"id": list_id})
    episode_data = []
    episodes = entries.find_all("li")
    for e in episodes:
        data = {
            'eid': e.get("data-id"),
            'title': e.text.lstrip().rstrip(),
        }
        episode_data.append(data)
    episode_data = list(reversed(episode_data))
    return episode_data


def get_movie_tokens(eid, mid, extra_headers=None):
    TOKEN_URL = 'https://yesmovies.to/ajax/movie_token'
    current_time = str(int(time.time()))
    params = (
        ('eid', eid),
        ('mid', mid),
        ('_', current_time),
    )
    webpage = s.get(TOKEN_URL, params=params, headers=extra_headers).text
    tokens = re.search(r"_x='(?P<x_value>[^']+)',\s_y='(?P<y_value>[^']+)';", webpage)
    x, y = tokens.group("x_value"), tokens.group("y_value")
    return x, y


def download_movie_episodes(movie_id, extra_headers=None):
    BASE_AJAX = "https://yesmovies.to/ajax/v4_movie_episodes/%s"
    ajax_json = s.get(BASE_AJAX % movie_id, headers=extra_headers).text
    ajax_json = json.loads(ajax_json)
    return ajax_json.get("html")


def main():
    parser = argparse.ArgumentParser(description='A CLI program to download TV/Movies from yesmovies.to')
    parser.add_argument('url', action="store",
                        help='an integer for the accumulator')
    args = parser.parse_args()
    if args.url:
        print(args.url)
        main_downloader(args.url)

if __name__ == '__main__':
    main()